class Runner {
  constructor() {
    /** @type {string} */
    this.lastInput = "";
    this.webAssemblyJavascriptDriverLoaded = false;
    this.webAssemblyBinaryReady = false;
  }

  doCallCalculator() {
    let result = this.calculatorWebAssembly.Module.ccall('callCalculator', 'string', ['string'], [this.lastInput]);
    this.postComputationToMainThread(result);
    this.calculatorWebAssembly._free(result);
  }

  getChar(tty) {
    if (tty.input.length !== 0) {
      return tty.input.shift();
    }
    tty.input = this.calculatorWebAssembly.intArrayFromString(this.lastInput + "\n", true);
    return tty.input.shift();
  }

  callCalculator(
    /** @type {string} */
    input,
    /** @type {function} */
    callback,
  ) {
    this.lastInput = input;
    if (!this.webAssemblyJavascriptDriverLoaded) {
      this.loadWebAssemblyDriver();
      return;
    }
    if (this.webAssemblyBinaryReady) {
      this.doCallCalculator();
      return;
    }
    setTimeout(() => {
      this.callCalculator(input, callback);
    }, 100);
  }

  receiveMessage(e) {
    let message = e.data;
    let request = message[0];
    let computationInput = message[1];
    if (request === "compute") {
      this.callCalculator(computationInput, (/** @type {string} */ result) => {
        this.postComputationToMainThread(result);
      })
    }
  }

  loadWebAssemblyDriver() {
    this.webAssemblyJavascriptDriverLoaded = true;
    // Improtant. 
    // 1. The file calculator.js
    // is autogenerated and kept in its pure autogenerated form.
    // It will have an extra "module.exports" code snippet appended to it 
    // by the calculator server during the browserification process.
    // 2. The file name is relative to calculator_html folder.
    // 3. Requiring this file does a lot of heavy work by default, such as downloading the 
    // web assembly binary, so we trigger it explicitly here, rather than at the start of the present file.
    this.calculatorWebAssembly = require("./web_assembly/calculator");
    this.calculatorWebAssembly.TTY.default_tty_ops.get_char = (tty) => {
      this.getChar(tty);
    }
    this.calculatorWebAssembly.addOnInit(() => {
      this.webAssemblyBinaryReady = true;
      this.doCallCalculator();
    });
  }

  postComputationToMainThread(
    /** @type {string} */
    result,
  ) {
    postMessage(result);
  }
}

let runner = new Runner();

onmessage = (e) => {
  runner.receiveMessage(e);
};

module.exports = {
  runner,
};