#include "general_lists.h"
#include "math_extra_differential_operators.h"
#include "math_extra_finite_groups_implementation.h"
#include "math_extra_lie_theory_extras.h"
#include "math_extra_semisimple_lie_algebras.h"
#include "math_extra_universal_enveloping.h"
#include "math_general.h"

std::string MonomialWeylAlgebra::toString(FormatExpressions* format) const {
  if (this->isConstant()) {
    return "1";
  }
  std::stringstream out;
  FormatExpressions currentFormat;
  if (format == nullptr) {
    currentFormat.polynomialDefaultLetter = "\\partial";
  } else {
    currentFormat.polynomialDefaultLetter = format->weylAlgebraDefaultLetter;
    currentFormat.polynomialAlphabet = format->weylAlgebraLetters;
  }
  std::string firstS = this->polynomialPart.toString(format);
  std::string secondS = this->differentialPart.toString(&currentFormat);
  if (firstS != "1") {
    out << firstS;
  }
  if (secondS != "1") {
    out << secondS;
  }
  return out.str();
}

std::string QuasiDifferentialMononomial::toString(FormatExpressions* format)
const {
  std::stringstream out;
  out << this->weylMonomial.toString(format) << "\\otimes ";
  out << this->matrixMonomial.toString(format);
  return out.str();
}

Vector<Rational>
SubgroupWeylGroupAutomorphismsGeneratedByRootReflectionsAndAutomorphisms::
getRho() {
  Vector<Rational> result;
  this->rootsOfBorel.sum(result, this->ambientWeyl->getDimension());
  result /= 2;
  return result;
}

void SubgroupWeylGroupAutomorphismsGeneratedByRootReflectionsAndAutomorphisms::
getMatrixOfElement(
  const ElementSubgroupWeylGroupAutomorphisms& input,
  Matrix<Rational>& outputMatrix
) const {
  Vectors<Rational> startBasis;
  Vectors<Rational> imageBasis;
  startBasis.makeEiBasis(this->ambientWeyl->getDimension());
  this->actByElement(input, startBasis, imageBasis);
  outputMatrix.assignVectorsToRows(imageBasis);
  outputMatrix.transpose();
}

bool SubgroupWeylGroupAutomorphismsGeneratedByRootReflectionsAndAutomorphisms::
computeSubGroupFromGeneratingReflections(
  Vectors<Rational>* inputRoots,
  List<Vectors<Rational> >* inputExternalAutos,
  int upperLimitNumberOfElements,
  bool recomputeAmbientRho
) {
  STACK_TRACE(
    "SubgroupWeylGroupAutomorphismsGeneratedByRootReflectionsAndAutomorphisms"
    "::computeSubGroupFromGeneratingReflections"
  );
  this->checkInitialization();
  HashedList<Vector<Rational> > orbitRho;
  this->truncated = false;
  this->allElements.clear();
  orbitRho.clear();
  if (this->ambientWeyl->cartanSymmetric.numberOfRows < 1) {
    return false;
  }
  if (recomputeAmbientRho) {
    this->ambientWeyl->computeRho(false);
  }
  this->simpleRootsInner.setSize(0);
  if (inputRoots != nullptr) {
    this->simpleRootsInner = *inputRoots;
  }
  if (inputExternalAutos != nullptr) {
    this->externalAutomorphisms = *inputExternalAutos;
  }
  this->ambientWeyl->transformToSimpleBasisGenerators(
    this->simpleRootsInner, this->ambientWeyl->rootSystem
  );
  this->computeRootSubsystem();
  ElementSubgroupWeylGroupAutomorphisms currentElement;
  currentElement.owner = this;
  Vector<Rational> vectorGeneratingFaithfulOrbit;
  vectorGeneratingFaithfulOrbit = this->ambientWeyl->rho;
  // We desire that the stabilizer of vectorGeneratingFaithfulOrbit
  // is trivial, i.e., the orbit generated by that vector will have as many
  // elements as the subgroup.
  // This is guaranteed if the vector has trivial stabilizer in the
  // ambient Weyl group + outer automorphisms.
  // The rho element (half sum of positive roots divided by 2)
  // almost meets the requirements: it has no stabilizer in the Weyl group
  // but unfortunately is not stabilized by the outer automorphisms.
  // To circumvent the issue, we make the following dirty hack
  // which will work on any simple Weyl group. A proper fix
  // requires some math work and we postpone it to the future.
  vectorGeneratingFaithfulOrbit *= 50;
  // scale rho by 50
  vectorGeneratingFaithfulOrbit[0].addInteger(1);
  // <- slightly perturb the first coordinate.
  // This perturbation breaks the outer automorphism invariance for all
  // simple Weyl group of simple Lie algebras.
  // This needs needs improvement for non-simple groups.
  orbitRho.addOnTop(vectorGeneratingFaithfulOrbit);
  this->allElements.addOnTop(currentElement);
  Vector<Rational> currentRoot;
  for (int i = 0; i < this->allElements.size; i ++) {
    for (int j = 0; j < this->simpleRootsInner.size; j ++) {
      this->ambientWeyl->reflectBetaWithRespectToAlpha(
        this->simpleRootsInner[j], orbitRho[i], false, currentRoot
      );
      if (!orbitRho.contains(currentRoot)) {
        orbitRho.addOnTop(currentRoot);
        currentElement = this->allElements[i];
        currentElement.multiplyOnTheRightBySimpleRootInner(j);
        this->allElements.addOnTop(currentElement);
      }
    }
    for (int j = 1; j < this->externalAutomorphisms.size; j ++) {
      orbitRho[i].coordinatesInBasis(
        this->externalAutomorphisms[j], currentRoot, nullptr
      );
      if (!orbitRho.contains(currentRoot)) {
        orbitRho.addOnTop(currentRoot);
        currentElement = this->allElements[i];
        currentElement.multiplyOnTheRightByOuterAutomorphism(j);
        this->allElements.addOnTop(currentElement);
      }
    }
    if (upperLimitNumberOfElements > 0) {
      if (this->allElements.size >= upperLimitNumberOfElements) {
        this->truncated = true;
        return false;
      }
    }
  }
  return true;
}

void HtmlRoutines::replaceEqualitiesAndAmpersandsBySpaces(
  std::string& inputOutput
) {
  for (unsigned i = 0; i < inputOutput.size(); i ++) {
    if (inputOutput[i] == '=' || inputOutput[i] == '&') {
      inputOutput[i] = ' ';
    }
  }
}

bool VectorPartition::initialize(
  const Vectors<Rational>& inputPartitioningVectors,
  const Vector<Rational>& inputTarget
) {
  STACK_TRACE("VectorPartition::initialize");
  for (int i = 0; i < inputPartitioningVectors.size; i ++) {
    if (!inputPartitioningVectors[i].isPositive()) {
      return false;
    }
  }
  this->partitioningVectors = inputPartitioningVectors;
  if (this->partitioningVectors.size == 0) {
    return false;
  }
  if (this->partitioningVectors[0].size != inputTarget.size) {
    return false;
  }
  if (inputTarget.isEqualToZero()) {
    return false;
  }
  this->targetSum = inputTarget;
  this->currentPartition.initializeFillInObject(
    this->partitioningVectors.size, 0
  );
  this->currentPartitionSum.makeZero(this->targetSum.size);
  return true;
}

void VectorPartition::addIndex(int index, int quantity) {
  this->currentPartition[index] += quantity;
  this->currentPartitionSum += this->partitioningVectors[index] * quantity;
}

bool VectorPartition::addOne() {
  STACK_TRACE("VectorPartition::addOne");
  for (int i = this->numberOfVectors() - 1; i >= 0; i --) {
    if (this->addOneAtIndex(i)) {
      return true;
    }
  }
  return false;
}

bool VectorPartition::addOneAtIndex(int atIndex) {
  STACK_TRACE("VectorPartition::addOneAtIndex");
  this->addIndex(atIndex, 1);
  if (!this->currentPartitionSumExceedsGoal()) {
    return true;
  }
  this->addIndex(atIndex, - this->currentPartition[atIndex]);
  return false;
}

bool VectorPartition::incrementReturnFalseIfPastLast() {
  STACK_TRACE("VectorPartition::incrementReturnFalseIfPastLast");
  ProgressReport report(10000);
  while (true) {
    if (report.tickAndWantReport()) {
      std::stringstream reportStream;
      reportStream
      << "Still seeking for the target: "
      << this->targetSum
      << ". Current value: "
      << this->currentPartition;
      report.report(reportStream.str());
    }
    if (!this->addOne()) {
      return false;
    }
    if (this->currentPartitionSum == this->targetSum) {
      return true;
    }
  }
}

int VectorPartition::numberOfPartitionsByEnumeration() {
  STACK_TRACE("VectorPartition::numberOfPartitionsByEnumeration");
  int count = 0;
  while (this->incrementReturnFalseIfPastLast()) {
    count ++;
  }
  return count;
}

bool VectorPartition::currentPartitionSumExceedsGoal() const {
  STACK_TRACE("VectorPartition::currentPartitionSumExceedsGoal");
  int dimension = this->getDimension();
  for (int i = 0; i < dimension; i ++) {
    if (this->targetSum[i] < this->currentPartitionSum[i]) {
      return true;
    }
  }
  return false;
}

std::string VectorPartition::toStringPartitioningVectors() {
  STACK_TRACE("VectorPartition::toStringPartitioningVectors");
  std::stringstream out;
  for (int i = 0; i < this->partitioningVectors.size; i ++) {
    out
    << "e_{"
    << i + 1
    << "}="
    << this->partitioningVectors[i].toString()
    << "<br>";
  }
  out << "<hr>";
  out << "Looking for partitions of: " << this->targetSum.toString();
  out << "<hr>";
  return out.str();
}

std::string VectorPartition::toStringOnePartition(
  const List<int>& currentPartition
) {
  Vector<Rational> vector;
  vector = currentPartition;
  return vector.toStringLetterFormat("e");
}

std::string VectorPartition::toStringAllPartitions(bool useHtml) {
  STACK_TRACE("VectorPartition::toStringAllPartitions");
  std::stringstream out;
  out << this->targetSum.toString() << "\n\n";
  if (useHtml) {
    out << "<br>";
  }
  for (int i = 0; i < this->partitions.size; i ++) {
    out << "=";
    out << this->toStringOnePartition(this->partitions[i]);
    out << "\n\n";
    if (useHtml) {
      out << "<br>\n";
    }
  }
  return out.str();
}

template <class Coefficient>
void ElementUniversalEnveloping<Coefficient>::
assignFromCoordinateFormWithRespectToBasis(
  List<ElementUniversalEnveloping<Coefficient> >& basis,
  Vector<Coefficient>& input,
  SemisimpleLieAlgebra& owner
) {
  this->makeZero(owner);
  ElementUniversalEnveloping<Coefficient> element;
  for (int i = 0; i < input.size; i ++) {
    if (!input[i].isEqualToZero()) {
      element.operator=(basis[i]);
      element.operator*=(input[i]);
      this->operator+=(element);
    }
  }
}

bool SemisimpleLieAlgebraOrdered::checkInitialization() const {
  if (this->ownerSemisimpleLieAlgebra == nullptr) {
    global.fatal
    << "Use of semisimple Lie algebra without an owner. "
    << global.fatal;
  }
  if (this->ownerSemisimpleLieAlgebra->flagDeallocated) {
    global.fatal << "Use after free of semisimple Lie algebra. ";
  }
  return true;
}

void SemisimpleLieAlgebraOrdered::getLinearCombinationFrom(
  ElementSemisimpleLieAlgebra<Rational>& input, Vector<Rational>& coefficients
) {
  this->checkInitialization();
  coefficients.makeZero(
    this->ownerSemisimpleLieAlgebra->getNumberOfGenerators()
  );
  for (int i = 0; i < input.size(); i ++) {
    int index = input[i].generatorIndex;
    coefficients[
      this->ownerSemisimpleLieAlgebra->getGeneratorFromRootIndex(index)
    ] =
    input.coefficients[i];
  }
  int numberOfPositiveRoots =
  this->ownerSemisimpleLieAlgebra->getNumberOfPositiveRoots();
  Vector<Rational> cartanElement = input.getCartanPart();
  for (int i = 0; i < this->ownerSemisimpleLieAlgebra->getRank(); i ++) {
    coefficients[numberOfPositiveRoots + i] = cartanElement[i];
  }
  this->chevalleyGeneratorsInCurrentCoordinates.actOnVectorColumn(
    coefficients
  );
}

int SemisimpleLieAlgebraOrdered::getDisplayIndexFromGeneratorIndex(
  int generatorIndex
) {
  int numberOfPositiveRoots =
  this->ownerSemisimpleLieAlgebra->getNumberOfPositiveRoots();
  int positiveRootsPlusRank =
  numberOfPositiveRoots + this->ownerSemisimpleLieAlgebra->getRank();
  if (generatorIndex >= positiveRootsPlusRank) {
    return generatorIndex - positiveRootsPlusRank + 1;
  }
  if (generatorIndex >= numberOfPositiveRoots) {
    return generatorIndex + 1;
  }
  return - numberOfPositiveRoots + generatorIndex;
}

void SemisimpleLieAlgebraOrdered::initialize(
  List<ElementSemisimpleLieAlgebra<Rational> >& inputOrder,
  SemisimpleLieAlgebra& owner
) {
  global.fatal << "not implemented" << global.fatal;
  if (inputOrder.size != owner.getNumberOfGenerators()) {
    return;
  }
  this->ownerSemisimpleLieAlgebra = &owner;
  this->elementOrder = inputOrder;
  this->chevalleyGeneratorsInCurrentCoordinates.initialize(
    owner.getNumberOfGenerators(), owner.getNumberOfGenerators()
  );
  this->chevalleyGeneratorsInCurrentCoordinates.makeZero();
  Vector<Rational> coordinatesInCurrentBasis;
  ElementSemisimpleLieAlgebra<Rational> currentElement;
  for (int i = 0; i < owner.getNumberOfGenerators(); i ++) {
    currentElement.makeGenerator(i, owner);
    currentElement.coordinatesInBasis(
      this->elementOrder, coordinatesInCurrentBasis
    );
    for (int j = 0; j < coordinatesInCurrentBasis.size; j ++) {
      this->chevalleyGeneratorsInCurrentCoordinates.elements[j][i] =
      coordinatesInCurrentBasis[j];
    }
  }
}

void SemisimpleLieAlgebraOrdered::initDefaultOrder(
  SemisimpleLieAlgebra& owner
) {
  List<ElementSemisimpleLieAlgebra<Rational> > defaultOrder;
  defaultOrder.setSize(owner.getNumberOfGenerators());
  for (int i = 0; i < defaultOrder.size; i ++) {
    ElementSemisimpleLieAlgebra<Rational>& currentElement = defaultOrder[i];
    currentElement.makeGenerator(i, owner);
  }
  this->initialize(defaultOrder, owner);
}

template <class Coefficient>
bool ElementSemisimpleLieAlgebra<Coefficient>::
isCoefficientOneChevalleyGenerator() {
  if (this->size == 1) {
    return this->coefficients[0] == 1;
  }
  return false;
}

void HomomorphismSemisimpleLieAlgebra::
getWeightsRelativeToKInSimpleKCoordinates(
  Vectors<Rational>& outputWeights,
  List<ElementSemisimpleLieAlgebra<Rational> >& inputElements
) {
  outputWeights.setSize(inputElements.size);
  Rational scalar;
  ElementSemisimpleLieAlgebra<Rational> bufferElement;
  for (int i = 0; i < inputElements.size; i ++) {
    Vector<Rational>& currentWeight = outputWeights[i];
    currentWeight.makeZero(this->domainAlgebra().getRank());
    ElementSemisimpleLieAlgebra<Rational>& currentElement = inputElements[i];
    for (int j = 0; j < this->domainAlgebra().getRank(); j ++) {
      this->coDomainAlgebra().lieBracket(
        this->imagesAllChevalleyGenerators[
          j + this->domainAlgebra().getNumberOfPositiveRoots()
        ],
        currentElement,
        bufferElement
      );
      if (!currentElement.isProportionalTo(bufferElement, scalar)) {
        global.fatal
        << "Lie algebra elements not "
        << "proportional as expected. "
        << global.fatal;
      }
      currentWeight[j] = scalar;
    }
  }
  Matrix<Rational> invertedCartan =
  this->domainAlgebra().weylGroup.cartanSymmetric;
  invertedCartan.invert();
  invertedCartan.actOnVectorsColumn(outputWeights);
}

template <class Coefficient>
void ElementSemisimpleLieAlgebra<Coefficient>::getBasisFromSpanOfElements(
  List<ElementSemisimpleLieAlgebra>& elements,
  List<ElementSemisimpleLieAlgebra>& outputBasis
) {
  Vectors<Rational> rootForm;
  rootForm.setSize(elements.size);
  for (int i = 0; i < elements.size; i ++) {
    ElementSemisimpleLieAlgebra& currentElement = elements[i];
    currentElement.toVectorNegativeRootSpacesFirst(rootForm[i]);
  }
  rootForm.chooseABasis();
  outputBasis.setSize(rootForm.size);
  for (int i = 0; i < rootForm.size; i ++) {
    ElementSemisimpleLieAlgebra& currentElement = outputBasis[i];
    currentElement.assignVectorNegativeRootSpacesCartanPosistiveRootSpaces(
      rootForm[i], (*currentElement.ownerArray)[
        currentElement.indexOfOwnerAlgebra
      ]
    );
  }
}

template <class Coefficient>
bool ElementSemisimpleLieAlgebra<Coefficient>::
needsParenthesisForMultiplication() const {
  return this->size > 1;
}

void SlTwoInSlN::climbDownFromHighestWeightAlongSl2String(
  Matrix<Rational>& input,
  Matrix<Rational>& output,
  Rational& outputCoefficients,
  int generatorPower
) {
  STACK_TRACE("SlTwoInSlN::climbDownFromHighestWeightAlongSl2String");
  if (&input == &output) {
    global.fatal << "Input coincides with output. " << global.fatal;
  }
  Rational currentWeight;
  Matrix<Rational>::lieBracket(this->hElement, input, output);
  bool isProportional = input.isProportionalTo(output, currentWeight);
  if (!isProportional) {
    global.comments << "<br>Climbing down does not work as expected!";
  }
  Rational raiseCoefficient;
  raiseCoefficient.makeZero();
  outputCoefficients.makeOne();
  output = input;
  for (int i = 0; i < generatorPower; i ++) {
    raiseCoefficient += currentWeight;
    currentWeight -= 2;
    outputCoefficients *= raiseCoefficient;
    Matrix<Rational>::lieBracket(this->fElement, output, output);
  }
}

std::string SlTwoInSlN::elementModuleIndexToString(int input, bool useHtml) {
  std::string beginMath;
  std::string endMath;
  std::string newLine;
  if (useHtml) {
    beginMath = "<span class ='mathcalculator'>";
    endMath = "</span>";
    newLine = "<br>";
  } else {
    beginMath = "$";
    endMath = "$";
    newLine = "\n\n\n";
  }
  Matrix<Rational>& currentHW = this->highestWeightVectors.objects[input];
  int currentEtaHw = this->gModKModules.objects[input].size - 1;
  // currentEtaHw-= currentEtaHw/2;
  int firstNonZeroRow = - 1;
  int firstNonZeroColumn = - 1;
  bool found = false;
  for (int i = 0; i < currentHW.numberOfRows; i ++) {
    if (found) {
      break;
    }
    for (int j = 0; j < currentHW.numberOfColumns; j ++) {
      if (!currentHW.elements[i][j].isEqualToZero()) {
        firstNonZeroColumn = j;
        firstNonZeroRow = i;
        found = true;
        break;
      }
    }
  }
  int sRow = 0;
  int kRow = 0;
  int sColumn = 0;
  int kColumn = 0;
  this->getIsPlusKIndexingFrom(firstNonZeroRow, sRow, kRow);
  this->getIsPlusKIndexingFrom(firstNonZeroColumn, sColumn, kColumn);
  std::stringstream out;
  out << "V_{";
  if (currentEtaHw != 0) {
    if (currentEtaHw != 1) {
      out << currentEtaHw;
    }
    out << "\\frac\\eta 2";
  }
  if (sRow != sColumn) {
    out << "-\\zeta_" << sColumn << "+\\zeta_" << sRow;
  }
  out << "}";
  return out.str();
}

void SlTwoInSlN::getIsPlusKIndexingFrom(int input, int& s, int& k) {
  s = 0;
  k = input;
  if (input >= this->dimension || input < 0) {
    return;
  }
  for (int offset = 0; offset <= input; offset += this->partition[s - 1]) {
    k = input - offset;
    s ++;
  }
}

std::string SlTwoInSlN::elementMatrixToTensorString(
  const Matrix<Rational>& input, bool useHtml
) {
  std::string beginMath;
  std::string endMath;
  std::string newLine;
  if (useHtml) {
    beginMath = "<span class ='mathcalculator'>";
    endMath = "</span>";
    newLine = "<br>";
  } else {
    beginMath = "$";
    endMath = "$";
    newLine = "\n\n\n";
  }
  std::stringstream out;
  std::string coefficient;
  bool found = false;
  for (int i = 0; i < input.numberOfRows; i ++) {
    for (int j = 0; j < input.numberOfColumns; j ++) {
      if (!input.elements[i][j].isEqualToZero()) {
        coefficient = input.elements[i][j].toString();
        if (coefficient == "- 1" || coefficient == "-1") {
          coefficient = "-";
        }
        if (coefficient == "1") {
          coefficient = "";
          if (found) {
            out << "+";
          }
        } else {
          if (found) {
            if (coefficient[0] != '-') {
              out << "+";
            }
          }
        }
        found = true;
        out << coefficient;
        int sI = 0;
        int kI = 0;
        int sJ = 0;
        int kJ = 0;
        this->getIsPlusKIndexingFrom(i, sI, kI);
        this->getIsPlusKIndexingFrom(j, sJ, kJ);
        out << "v_{i_{" << sI << "}";
        if (kI != 0) {
          out << "+" << kI;
        }
        out << "}\\otimes v^*_{i_{" << sJ << "}";
        if (kJ != 0) {
          out << "+" << kJ;
        }
        out << "}";
      }
    }
  }
  return out.str();
}

void SlTwoInSlN::extractHighestWeightVectorsFromVector(
  Matrix<Rational>& input,
  List<Matrix<Rational> >& outputDecompositionOfInput,
  List<Matrix<Rational> >& outputTheHWVectors
) {
  outputDecompositionOfInput.size = 0;
  outputTheHWVectors.size = 0;
  Matrix<Rational> remainder;
  remainder = input;
  Matrix<Rational> component;
  Matrix<Rational> highestWeightVector;
  Matrix<Rational> matrix;
  Rational coefficient;
  Rational scalar;
  int largestPowerNotKillingInput;
  while (!remainder.isEqualToZero()) {
    this->climbUpFromVector(
      remainder, highestWeightVector, largestPowerNotKillingInput
    );
    this->climbDownFromHighestWeightAlongSl2String(
      highestWeightVector, component, coefficient, largestPowerNotKillingInput
    );
    for (int i = 0; i < this->projectors.size; i ++) {
      Matrix<Rational>& currentProjector = this->projectors[i];
      matrix = highestWeightVector;
      matrix.multiplyOnTheLeft(currentProjector);
      if (!matrix.isEqualToZero()) {
        matrix.findFirstNonZeroElementSearchEntireRow(scalar);
        matrix /= scalar;
        outputTheHWVectors.addOnTop(matrix);
      }
    }
    global.fatal
    << "Extract highest vector not fully implemented yet. "
    << global.fatal;
    component /= coefficient;
    outputDecompositionOfInput.addOnTop(component);
    remainder -= component;
  }
}

void SlTwoInSlN::climbUpFromVector(
  Matrix<Rational>& input,
  Matrix<Rational>& outputLastNonZero,
  int& largestPowerNotKillingInput
) {
  Matrix<Rational> matrix;
  if (&input == &outputLastNonZero) {
    global.fatal
    << "Input not allowed to coincide with the output. "
    << global.fatal;
  }
  outputLastNonZero = input;
  largestPowerNotKillingInput = 0;
  for (
    Matrix<Rational>::lieBracket(this->eElement, outputLastNonZero, matrix);
    !matrix.isEqualToZero(); Matrix<Rational>::lieBracket(
      this->eElement, outputLastNonZero, matrix
    )
  ) {
    largestPowerNotKillingInput ++;
    outputLastNonZero = matrix;
  }
}

std::string SlTwoInSlN::getNotationString(bool useHtml) {
  std::stringstream out;
  std::string beginMath;
  std::string endMath;
  std::string newLine;
  if (useHtml) {
    beginMath = "<span class ='mathcalculator'>";
    endMath = "</span>";
    newLine = "<br>";
  } else {
    beginMath = "$";
    endMath = "$";
    newLine = "\n\n\n";
  }
  out
  << newLine
  << "Let the starting index of the j-th block be "
  << beginMath
  << "i_j"
  << endMath;
  out << "." << newLine << "In particular let: ";
  int offset = 1;
  for (int i = 0; i < this->partition.size; i ++) {
    out << beginMath << "i_" << i + 1 << "=" << offset << endMath << " ";
    out << " (size of block = " << this->partition[i] << "), ";
    offset += this->partition[i];
  }
  out
  << newLine
  << "Let "
  << beginMath
  << "\\eta"
  << endMath
  << " be the weight corresponding to h.";
  out
  << newLine
  << "Let "
  << beginMath
  << "\\zeta_{j}"
  << endMath
  << " be the weight corresponding to the j-th block";
  return out.str();
}

std::string SlTwoInSlN::initFromModuleDecomposition(
  List<int>& decompositionDimensions, bool useHtml, bool computePairingTable
) {
  std::stringstream out;
  this->partition = decompositionDimensions;
  this->partition.quickSortDescending();
  this->dimension = 0;
  for (int i = 0; i < this->partition.size; i ++) {
    this->dimension += this->partition[i];
  }
  this->hElement.initialize(this->dimension, this->dimension);
  this->hElement.makeZero();
  this->eElement.initialize(this->dimension, this->dimension);
  this->eElement.makeZero();
  this->fElement.initialize(this->dimension, this->dimension);
  this->fElement.makeZero();
  this->projectors.setSize(this->partition.size);
  int currentOffset = 0;
  std::string beginMath;
  std::string endMath;
  std::string newLine;
  if (useHtml) {
    beginMath = "<span class='mathcalculator'>";
    endMath = "</span>";
    newLine = "<br>";
  } else {
    beginMath = "$";
    endMath = "$";
    newLine = "\n\n\n";
  }
  for (int i = 0; i < this->partition.size; i ++) {
    this->projectors[i].initialize(this->dimension, this->dimension);
    this->projectors[i].makeZero();
    for (int j = 0; j < this->partition[i]; j ++) {
      this->hElement.elements[currentOffset + j][currentOffset + j] =
      this->partition[i] - 1 - 2 * j;
      this->projectors[i].elements[currentOffset + j][currentOffset + j] = 1;
      if (j != this->partition[i] - 1) {
        this->fElement.elements[currentOffset + j + 1][currentOffset + j] = 1;
        this->eElement.elements[currentOffset + j][currentOffset + j + 1] = (
          j + 1
        ) *(this->partition[i] - j - 1);
      }
    }
    currentOffset += this->partition[i];
  }
  out
  << newLine
  << beginMath
  << "h ="
  << this->elementMatrixToTensorString(this->hElement, useHtml)
  << "="
  << this->hElement.toStringWithBlocks(this->partition)
  << endMath;
  out
  << newLine
  << beginMath
  << "e ="
  << this->elementMatrixToTensorString(this->eElement, useHtml)
  << "="
  << this->eElement.toStringWithBlocks(this->partition)
  << endMath;
  out
  << newLine
  << beginMath
  << "f ="
  << this->elementMatrixToTensorString(this->fElement, useHtml)
  << "="
  << this->fElement.toStringWithBlocks(this->partition)
  << endMath;
  Matrix<Rational> matrix;
  matrix.initialize(this->dimension, this->dimension);
  List<Matrix<Rational> > decomposition;
  List<Matrix<Rational> > highestWeightCandidatesBeforeProjection;
  List<Matrix<Rational> > highestWeightCandidatesProjected;
  this->highestWeightVectors.size = 0;
  this->gModKModules.size = 0;
  for (int i = 0; i < this->dimension; i ++) {
    for (int j = 0; j < this->dimension; j ++) {
      matrix.makeZero();
      matrix.elements[i][j] = 1;
      this->extractHighestWeightVectorsFromVector(
        matrix, decomposition, highestWeightCandidatesBeforeProjection
      );
      highestWeightCandidatesProjected.size = 0;
      for (int k = 0; k < highestWeightCandidatesBeforeProjection.size; k ++) {
        for (int l = 0; l < this->projectors.size; l ++) {
          matrix = highestWeightCandidatesBeforeProjection[k];
          matrix.multiplyOnTheLeft(this->projectors[l]);
          if (!matrix.isEqualToZero()) {
            highestWeightCandidatesProjected.addOnTop(matrix);
          }
        }
      }
      for (int k = 0; k < highestWeightCandidatesProjected.size; k ++) {
        if (
          this->getModuleIndexFromHighestWeightVector(
            highestWeightCandidatesProjected[k]
          ) ==
          - 1
        ) {
          Matrix<Rational>& currentHighest =
          highestWeightCandidatesProjected[k];
          this->highestWeightVectors.addOnTop(currentHighest);
          this->gModKModules.expandOnTop(1);
          List<Matrix<Rational> >& currentModule =
          *this->gModKModules.lastObject();
          currentModule.size = 0;
          for (
            matrix = currentHighest; !matrix.isEqualToZero(); Matrix<
              Rational
            >::lieBracket(this->fElement, matrix, matrix)
          ) {
            currentModule.addOnTop(matrix);
          }
        }
      }
    }
  }
  out << this->getNotationString(useHtml);
  out
  << newLine
  << "...and the highest weights of the module decomposition are ("
  << this->highestWeightVectors.size
  << " modules):";
  for (int i = 0; i < this->highestWeightVectors.size; i ++) {
    out
    << newLine
    << beginMath
    << this->elementMatrixToTensorString(highestWeightVectors[i], useHtml)
    << endMath
    << ", highest weight of ";
    out
    << beginMath
    << this->elementModuleIndexToString(i, useHtml)
    << endMath;
  }
  if (computePairingTable) {
    out << this->initPairingTable(useHtml);
  }
  return out.str();
}

std::string SlTwoInSlN::initPairingTable(bool useHtml) {
  std::stringstream out;
  this->pairingTable.setSize(this->highestWeightVectors.size);
  for (int i = 0; i < this->pairingTable.size; i ++) {
    this->pairingTable[i].setSize(this->highestWeightVectors.size);
    for (int j = 0; j < this->pairingTable[i].size; j ++) {
      List<int>& currentPairing = this->pairingTable[i][j];
      out << this->pairTwoIndices(currentPairing, i, j, useHtml);
    }
  }
  return out.str();
}

std::string SlTwoInSlN::pairTwoIndices(
  List<int>& output, int leftIndex, int rightIndex, bool useHtml
) {
  std::string beginMath;
  std::string endMath;
  std::string newLine;
  FormatExpressions latexFormat;
  latexFormat.flagUseLatex = true;
  latexFormat.flagUseHTML = false;
  if (useHtml) {
    beginMath = "<span class='mathcalculator'>";
    endMath = "</span>";
    newLine = "<br>";
  } else {
    beginMath = "$";
    endMath = "$";
    newLine = "\n\n\n";
  }
  std::stringstream out;
  output.size = 0;
  List<Matrix<Rational> >& leftElements = this->gModKModules[leftIndex];
  List<Matrix<Rational> >& rightElements = this->gModKModules[rightIndex];
  Matrix<Rational> matrix;
  List<Matrix<Rational> > highestWeightsContainingModules;
  List<Matrix<Rational> > tempDecomposition;
  for (int i = 0; i < leftElements.size; i ++) {
    for (int j = 0; j < rightElements.size; j ++) {
      Matrix<Rational>& leftElement = leftElements[i];
      Matrix<Rational>& rightElement = rightElements[j];
      Matrix<Rational>::lieBracket(leftElement, rightElement, matrix);
      if (!matrix.isEqualToZero()) {
        this->extractHighestWeightVectorsFromVector(
          matrix, tempDecomposition, highestWeightsContainingModules
        );
        for (int k = 0; k < highestWeightsContainingModules.size; k ++) {
          output.addOnTopNoRepetition(
            this->getModuleIndexFromHighestWeightVector(
              highestWeightsContainingModules[k]
            )
          );
          if (
            this->getModuleIndexFromHighestWeightVector(
              highestWeightsContainingModules[k]
            ) ==
            - 1
          ) {
            global.comments
            << newLine
            << beginMath
            << "["
            << leftElement.toString(&latexFormat)
            << ", "
            << rightElement.toString(&latexFormat)
            << "] ="
            << matrix.toString(&latexFormat)
            << endMath;
          }
        }
      }
    }
  }
  out
  << newLine
  << beginMath
  << this->elementModuleIndexToString(leftIndex, useHtml)
  << endMath
  << " and "
  << beginMath
  << this->elementModuleIndexToString(rightIndex, useHtml)
  << endMath
  << " pair to: ";
  for (int i = 0; i < output.size; i ++) {
    out
    << beginMath
    << this->elementModuleIndexToString(output[i], useHtml)
    << endMath;
    if (i != output.size - 1) {
      out << beginMath << "\\oplus" << endMath;
    }
  }
  if (output.size > 0) {
    out << "  hw vectors: ";
    for (int i = 0; i < output.size; i ++) {
      out
      << beginMath
      << this->elementMatrixToTensorString(
        this->highestWeightVectors[output[i]], useHtml
      )
      << endMath
      << ",";
    }
  }
  return out.str();
}

void MonomialPolynomial::makeEi(
  int letterIndex, int power, int expectedNumberOfVariables
) {
  (void) expectedNumberOfVariables;
  this->makeOne();
  if (power == 0) {
    return;
  }
  this->setVariable(letterIndex, power);
}

void MonomialPolynomial::setVariable(
  int variableIndex, const Rational& power
) {
  if (variableIndex >= this->monomialBody.size) {
    this->setSize(variableIndex + 1);
  }
  this->monomialBody[variableIndex] = power;
  this->trimTrailingZeroes();
}

void MonomialPolynomial::makeFromPowers(
  const Vector<Rational>& inputMonomialBody
) {
  this->monomialBody = inputMonomialBody;
  this->trimTrailingZeroes();
}

void MonomialPolynomial::multiplyByVariable(
  int variableIndex, const Rational& variablePower
) {
  if (variablePower.isEqualToZero()) {
    return;
  }
  if (variableIndex >= this->monomialBody.size) {
    this->setSize(variableIndex);
  }
  this->monomialBody[variableIndex] += variablePower;
  this->trimTrailingZeroes();
}

MonomialPolynomial::MonomialPolynomial(const Vector<Rational>& exponents) {
  this->monomialBody = exponents;
  this->trimTrailingZeroes();
}

const Rational& MonomialPolynomial::operator[](int i) const {
  if (i < 0 || i >= this->monomialBody.size) {
    global.fatal
    << "Requested exponent "
    << "of monomial variable with index "
    << i
    << " which is out of range (size = "
    << this->monomialBody.size
    << "). "
    << global.fatal;
  }
  return this->monomialBody[i];
}

Rational MonomialPolynomial::operator()(int i) const {
  if (i < 0) {
    global.fatal
    << "Requested exponent of monomial variable "
    << "with index "
    << i
    << " which is negative. "
    << global.fatal;
  }
  if (i >= this->monomialBody.size) {
    return 0;
  }
  return this->monomialBody[i];
}

bool MonomialPolynomial::hasPositiveOrZeroExponents() const {
  for (int i = 0; i < this->monomialBody.size; i ++) {
    if (this->monomialBody[i].isNegative()) {
      return false;
    }
  }
  return true;
}

bool MonomialPolynomial::operator>(const MonomialPolynomial& other) const {
  return
  MonomialPolynomial::greaterThan_totalDegree_leftLargerWins(*this, other);
}

bool MonomialPolynomial::isDivisibleBy(const MonomialPolynomial& other) const {
  for (
    int i = other.monomialBody.size - 1; i >= this->monomialBody.size; i --
  ) {
    if (other.monomialBody[i] > 0) {
      return false;
    }
  }
  int upperLimit =
  MathRoutines::minimum(this->monomialBody.size, other.monomialBody.size);
  for (int i = 0; i < upperLimit; i ++) {
    if (this->monomialBody[i] < other.monomialBody[i]) {
      return false;
    }
  }
  return true;
}

bool MonomialPolynomial::operator==(const MonomialPolynomial& other) const {
  for (
    int i = other.monomialBody.size - 1; i >= this->monomialBody.size; i --
  ) {
    if (other.monomialBody[i] != 0) {
      return false;
    }
  }
  for (
    int i = this->monomialBody.size - 1; i >= other.monomialBody.size; i --
  ) {
    if (this->monomialBody[i] != 0) {
      return false;
    }
  }
  int highestIndex =
  MathRoutines::minimum(
    this->minimalNumberOfVariables(), other.minimalNumberOfVariables()
  ) -
  1;
  for (int i = highestIndex; i >= 0; i --) {
    if (this->monomialBody[i] != other.monomialBody[i]) {
      return false;
    }
  }
  return true;
}

bool MonomialPolynomial::greaterThan_totalDegree_rightSmallerWins(
  const MonomialPolynomial& left, const MonomialPolynomial& right
) {
  if (left == right) {
    return false;
  }
  if (left.totalDegree() > right.totalDegree()) {
    return true;
  }
  if (left.totalDegree() < right.totalDegree()) {
    return false;
  }
  return !MonomialPolynomial::greaterThan_rightLargerWins(left, right);
}

// "Graded lexicographic" order.
bool MonomialPolynomial::greaterThan_totalDegree_leftLargerWins(
  const MonomialPolynomial& left, const MonomialPolynomial& right
) {
  if (left.totalDegree() > right.totalDegree()) {
    return true;
  }
  if (left.totalDegree() < right.totalDegree()) {
    return false;
  }
  return left.greaterThan_leftLargerWins(right);
}

bool MonomialPolynomial::greaterThan_rightLargerWins(
  const MonomialPolynomial& other
) const {
  for (
    int i = other.monomialBody.size - 1; i >= this->monomialBody.size; i --
  ) {
    if (other.monomialBody[i] > 0) {
      return false;
    }
    if (other.monomialBody[i] < 0) {
      return true;
    }
  }
  for (
    int i = this->monomialBody.size - 1; i >= other.monomialBody.size; i --
  ) {
    if (this->monomialBody[i] > 0) {
      return true;
    }
    if (this->monomialBody[i] < 0) {
      return false;
    }
  }
  int highestIndex =
  MathRoutines::minimum(
    this->minimalNumberOfVariables(), other.minimalNumberOfVariables()
  ) -
  1;
  for (int i = highestIndex; i >= 0; i --) {
    if (this->monomialBody[i] > other.monomialBody[i]) {
      return true;
    }
    if (this->monomialBody[i] < other.monomialBody[i]) {
      return false;
    }
  }
  return false;
}

List<MonomialPolynomial>::Comparator& MonomialPolynomial::orderDefault() {
  static List<MonomialPolynomial>::Comparator result(
    MonomialPolynomial::greaterThan_totalDegree_leftLargerWins
  );
  return result;
}

List<MonomialPolynomial>::Comparator& MonomialPolynomial::
orderForGreatestCommonDivisor() {
  static List<MonomialPolynomial>::Comparator result(
    MonomialPolynomial::greaterThan_rightLargerWins
  );
  return result;
}

List<MonomialPolynomial>::Comparator& MonomialPolynomial::
orderDegreeThenLeftLargerWins() {
  static List<MonomialPolynomial>::Comparator result(
    MonomialPolynomial::greaterThan_totalDegree_leftLargerWins
  );
  return result;
}

bool MonomialPolynomial::greaterThan_leftLargerWins(
  const MonomialPolynomial& other
) const {
  int commonSize =
  MathRoutines::minimum(
    this->minimalNumberOfVariables(), other.minimalNumberOfVariables()
  );
  for (int i = 0; i < commonSize; i ++) {
    if (this->monomialBody[i] > other.monomialBody[i]) {
      return true;
    }
    if (this->monomialBody[i] < other.monomialBody[i]) {
      return false;
    }
  }
  for (int i = this->monomialBody.size; i < other.monomialBody.size; i ++) {
    if (other.monomialBody[i] > 0) {
      return false;
    }
    if (other.monomialBody[i] < 0) {
      return true;
    }
  }
  for (int i = other.monomialBody.size; i < this->monomialBody.size; i ++) {
    if (this->monomialBody[i] > 0) {
      return true;
    }
    if (this->monomialBody[i] < 0) {
      return false;
    }
  }
  return false;
}

void MonomialPolynomial::trimTrailingZeroes() {
  for (int i = this->monomialBody.size - 1; i >= 0; i --) {
    if (this->monomialBody[i] != 0) {
      break;
    }
    this->monomialBody.setSize(this->monomialBody.size - 1);
  }
}

bool MonomialPolynomial::hasNonNegativeIntegralExponents() const {
  for (Rational& power : this->monomialBody) {
    if (!power.isInteger() || power.isNegative()) {
      return false;
    }
  }
  return true;
}

bool MonomialPolynomial::hasSmallIntegralPositivePowers(int* whichtotalDegree)
const {
  for (int i = 0; i < this->monomialBody.size; i ++) {
    if (!this->monomialBody[i].isIntegerFittingInInt(nullptr)) {
      return false;
    }
    if (this->monomialBody[i] < 0) {
      return false;
    }
  }
  return this->totalDegree().isIntegerFittingInInt(whichtotalDegree);
}

void MonomialPolynomial::raiseToPower(const Rational& power) {
  for (int i = 0; i < this->monomialBody.size; i ++) {
    this->monomialBody[i] *= power;
  }
  this->trimTrailingZeroes();
}

void MonomialPolynomial::operator*=(const MonomialPolynomial& other) {
  this->setSize(
    MathRoutines::maximum(this->monomialBody.size, other.monomialBody.size)
  );
  for (int i = 0; i < other.monomialBody.size; i ++) {
    this->monomialBody[i] += other.monomialBody[i];
  }
  this->trimTrailingZeroes();
}

void MonomialPolynomial::operator/=(const MonomialPolynomial& other) {
  this->setSize(
    MathRoutines::maximum(this->monomialBody.size, other.monomialBody.size)
  );
  for (int i = 0; i < other.monomialBody.size; i ++) {
    this->monomialBody[i] -= other.monomialBody[i];
  }
  this->trimTrailingZeroes();
}

void MonomialPolynomial::setSize(int variableCount) {
  if (variableCount < 0) {
    variableCount = 0;
  }
  int oldSize = this->monomialBody.size;
  this->monomialBody.setSize(variableCount);
  for (int i = oldSize; i < this->monomialBody.size; i ++) {
    this->monomialBody[i] = 0;
  }
}

bool Cone::isInCone(const Vectors<Rational>& vertices) const {
  for (int i = 0; i < vertices.size; i ++) {
    if (!this->isInCone(vertices[i])) {
      return false;
    }
  }
  return true;
}

bool Cone::isInCone(const Vector<Rational>& point) const {
  if (this->flagIsTheZeroCone) {
    return point.isEqualToZero();
  }
  for (const Wall& wall : this->walls) {
    if (!wall.isInClosedHalfSpace(point)) {
      return false;
    }
  }
  return true;
}

bool Cone::isInInterior(const Vector<Rational>& point) const {
  if (this->flagIsTheZeroCone) {
    return false;
  }
  for (const Wall& wall : this->walls) {
    if (!wall.isInOpenHalfSpace(point)) {
      return false;
    }
  }
  return true;
}

std::string MonomialPolynomial::toMathML(
  FormatExpressions* polynomialFormat,
  MathMLExpressionProperties* outputProperties
) const {
  std::stringstream out;
  MemorySaving<FormatExpressions> formatContainer;
  if (polynomialFormat == nullptr) {
    polynomialFormat = &formatContainer.getElement();
  }
  if (this->isConstant()) {
    if (outputProperties != nullptr) {
      outputProperties->isOne = true;
    }
    return "<mi>1</mi>";
  }
  MathMLExpressionProperties exponentProperties;
  for (int i = 0; i < this->monomialBody.size; i ++) {
    const Rational& onePower = this->monomialBody[i];
    if (onePower.isEqualToZero()) {
      continue;
    }
    std::string base = polynomialFormat->polynomialMathMLLetter(i);
    std::string exponentString =
    onePower.toMathML(nullptr, &exponentProperties);
    if (exponentProperties.startsWithMinus) {
      exponentString = "<mrow>" + exponentString + "</mrow>";
    }
    out << "<msup>" << base << exponentString << "</msup>";
  }
  return out.str();
}

std::string MonomialPolynomial::toString(FormatExpressions* polynomialFormat)
const {
  std::stringstream out;
  MemorySaving<FormatExpressions> formatContainer;
  if (polynomialFormat == nullptr) {
    polynomialFormat = &formatContainer.getElement();
  }
  if (this->isConstant()) {
    return "1";
  }
  for (int i = 0; i < this->monomialBody.size; i ++) {
    if ((this->monomialBody[i].isEqualToZero())) {
      continue;
    }
    out << polynomialFormat->polynomialLatexLetter(i);
    if (this->monomialBody[i] == 1) {
      out << " ";
    } else {
      std::string exponentString = this->monomialBody[i].toString();
      if (exponentString.size() == 1) {
        out << "^" << exponentString;
      } else {
        out << "^{" << exponentString << "}";
      }
    }
  }
  return out.str();
}
