#include<sstream>
void static_html2(std::stringstream& output){
output << " <html>\n";
output << " <head> \n";
output << " <title>\n";
output << " Root systems\n";
output << " </title>\n";
output << " </head>\n";
output << " <body>\n";
}
void static_html3(std::stringstream& output){
output << " <!>\n";
output << " <!--Option-->\n";
output << " <select name=\"textType\" id=\"textType\" onchange=\"initRecompute();\">\n";
output << "   <option selected=\"1\">A</option>\n";
output << "   <option>B</option>\n";
output << "   <option>C</option>\n";
output << "   <option>D</option>\n";
output << "   <option>E</option>\n";
output << "   <option>F</option>\n";
output << "   <option>G</option>\n";
output << " </select>\n";
output << " <select name=\"textDim\" id=\"textDim\" onchange=\"initRecompute();\">\n";
output << "   <option selected=\"1\">1</option>\n";
output << "   <option>2</option>\n";
output << "   <option>3</option>\n";
output << "   <option>4</option>\n";
output << "   <option>5</option>\n";
output << "   <option>6</option>\n";
output << "   <option>7</option>\n";
output << "   <option>8</option>\n";
output << " </select>\n";
}
void static_html4(std::stringstream& output){
output << " <!>\n";
output << " \n";
output << " <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/dojo/1.4/dojo/dojo.xd.js\" djConfig = \"parseOnLoad: true\"></script>\n";
output << " <div style=\"width:400;height:400;border:solid 1px\" id=\"canvasMain\" onmousemove=\"mouseMoveRedraw(event.clientX, event.clientY);\" onmousedown=\"clickCanvasMain(event.clientX, event.clientY);\" onmouseup=\"ButtonIsDown=false; selectedBasisIndex=-1;\"></div>\n";
output << " You can drag the center and the basis vectors.<br>\n";
output << " <textarea id=\"outputField\">\n";
output << " </textarea>\n";
output << " \n";
output << " <script type=\"text/javascript\">\n";
output << " var CartanSymmetric;\n";
output << " var theRootSystem;\n";
output << " var theRootSystemSize;\n";
output << " var theRootSystemHashes;\n";
output << " var theRootSystemHashesSizes;\n";
output << " var HashSize=1000;\n";
output << " var theWeylLetter;\n";
output << " var theWeylDim;\n";
output << " \n";
output << " function generateRootSystemFromWeylLetterAndDim(WeylLetter, WeylDim)\n";
output << " { if (WeylLetter!=\"A\" && WeylLetter!=\"B\" && WeylLetter!=\"C\" && WeylLetter!=\"D\" && WeylLetter!=\"E\" && WeylLetter!=\"F\" && WeylLetter!=\"G\" )\n";
output << "     return;\n";
output << "   if (WeylDim>9 || WeylDim<1)\n";
output << "     return;\n";
output << "   makeCartanArbitrary(WeylLetter, WeylDim);\n";
output << "   GenerateRootSystem();\n";
output << " }\n";
output << " \n";
output << " function makeCartanArbitrary(WeylLetter, WeylDim)\n";
output << " { theWeylLetter=WeylLetter;\n";
output << "   theWeylDim= WeylDim;\n";
output << "   if (theWeylLetter==\"E\")\n";
output << "   { if (theWeylDim<6)\n";
output << "       theWeylDim=6;\n";
output << "     if (theWeylDim>8)\n";
output << "       theWeylDim=8;\n";
output << "   }\n";
output << "   if (theWeylLetter==\"G\")\n";
output << "     theWeylDim=2;\n";
output << "   makeCartanAn(theWeylDim);\n";
output << "   if (theWeylLetter==\"B\")\n";
output << "   { CartanSymmetric[theWeylDim-1][theWeylDim-1]=1;\n";
output << "   }\n";
output << "   if (theWeylLetter==\"E\")\n";
output << "   { CartanSymmetric[0][1]=0; CartanSymmetric[1][0]=0;\n";
output << "     CartanSymmetric[1][2]=0; CartanSymmetric[2][1]=0;\n";
output << "     CartanSymmetric[0][2]=-1; CartanSymmetric[2][0]=-1;\n";
output << "     CartanSymmetric[1][3]=-1; CartanSymmetric[3][1]=-1;\n";
output << "   }  \n";
output << "   if (theWeylLetter==\"G\")\n";
output << "   { CartanSymmetric[0][0]=6; CartanSymmetric[0][1]=-3;\n";
output << "     CartanSymmetric[1][0]=-3; CartanSymmetric[1][1]=2;\n";
output << "   }\n";
output << "   document.getElementById(\"textDim\").value=theWeylDim;\n";
output << "   document.getElementById(\"textType\").value=theWeylLetter;  \n";
output << " }\n";
output << " \n";
output << " function makeCartanAn(WeylDim)\n";
output << " { CartanSymmetric= new Array(WeylDim);\n";
output << "   for (var i=0; i<WeylDim; i++)\n";
output << "   { CartanSymmetric[i]= new Array(WeylDim);\n";
output << "     for (var j=0; j<WeylDim; j++)\n";
output << "       CartanSymmetric[i][j]=0;\n";
output << "     CartanSymmetric[i][i]=2;\n";
output << "     if (i<WeylDim-1)\n";
output << "       CartanSymmetric[i][i+1]=-1;\n";
output << "     if (i>0)\n";
output << "       CartanSymmetric[i][i-1]=-1;\n";
output << "   }\n";
output << " }\n";
output << " \n";
output << " function ClearRootSystem()\n";
output << " { theRootSystemHashes= new Array(HashSize);\n";
output << "   theRootSystemHashesSizes= new Array(HashSize);\n";
output << "   theRootSystem= new Object(Array(HashSize));\n";
output << "   for (var i=0; i<HashSize; i++)\n";
output << "   { theRootSystemHashesSizes[i]=0;\n";
output << "     theRootSystemHashes[i]= new Array();\n";
output << "   }\n";
output << "   theRootSystemSize=0;\n";
output << " }\n";
output << " \n";
output << " function HashFunctionRoot(theRoot, theWeylDim)\n";
output << " { var result=0;\n";
output << "   for (var i=0; i<theWeylDim; i++)\n";
output << "     result+=(i+6)*(6+1)*theRoot[i];\n";
output << "   result= result % HashSize;\n";
output << "   if (result<0)\n";
output << "     result+=HashSize;\n";
output << "   return result;\n";
output << " }\n";
output << " \n";
output << " function getRootIndex(theRoot, theWeylDim)\n";
output << " { var theHash = HashFunctionRoot(theRoot, theWeylDim);\n";
output << "   var hashArraySize=theRootSystemHashesSizes[theHash];\n";
output << "   for (var i=0; i<hashArraySize; i++)\n";
output << "   { theIndex=theRootSystemHashes[theHash][i];\n";
output << "     if (AreEqualRoots(theRootSystem[theIndex], theRoot, theWeylDim))\n";
output << "       return theIndex;\n";
output << "   }\n";
output << "   return -1;\n";
output << " }\n";
output << " \n";
output << " function AreEqualRoots(root1, root2, theDim)\n";
output << " { for (var i=0; i<theDim; i++)\n";
output << "     if (root1[i]!=root2[i])\n";
output << "       return false;\n";
output << "   return true;\n";
output << " }\n";
output << " \n";
output << " function addToRootSystemNoRepetition(theRoot)\n";
output << " { var theIndex=getRootIndex(theRoot, theWeylDim);\n";
output << "   if (theIndex==-1)\n";
output << "   { theRootSystem[theRootSystemSize]=new Array(theWeylDim);\n";
output << "     for (var i=0; i<theWeylDim; i++)\n";
output << "       theRootSystem[theRootSystemSize][i]=theRoot[i];\n";
output << "     var theHashIndex=HashFunctionRoot(theRoot, theWeylDim);\n";
output << "     var theHashSize=theRootSystemHashesSizes[theHashIndex];\n";
output << "     theRootSystemHashes[theHashIndex][theHashSize]=theRootSystemSize;\n";
output << "     theRootSystemHashesSizes[theHashIndex]++;\n";
output << "     theRootSystemSize++;\n";
output << "   }\n";
output << "   return false;\n";
output << " }\n";
output << " \n";
output << " function getScalarProduct(root1, root2)\n";
output << " { var result=0; \n";
output << "   for (var i=0; i<theWeylDim; i++)\n";
output << "     for (var j=0; j<theWeylDim; j++)\n";
output << "       result+= root1[i]*root2[j]*CartanSymmetric[i][j];\n";
output << "   \n";
output << "   return result;\n";
output << " }\n";
output << " \n";
output << " function ActOnARootGenIndex(theIndex, input, output)\n";
output << " { for (i=0; i<theWeylDim; i++)\n";
output << "     output[i]= input[i];\n";
output << "   theScalarProduct=getScalarProduct(theRootSystem[theIndex], input);\n";
output << "   output[theIndex]-= theScalarProduct*2/getScalarProduct(theRootSystem[theIndex],theRootSystem[theIndex]);\n";
output << "   return output;\n";
output << " }\n";
output << " \n";
output << " function GenerateRootSystem()\n";
output << " { var theOutputRoot= new Object(Array(theWeylDim));\n";
output << "   ClearRootSystem();\n";
output << "   for (var j=0; j<theWeylDim; j++)\n";
output << "   { for (var i=0; i<theWeylDim; i++)\n";
output << "       theOutputRoot[i]=0;\n";
output << "     theOutputRoot[j]=1;\n";
output << "     addToRootSystemNoRepetition(theOutputRoot);\n";
output << "   }\n";
output << "   for (var l=0 ;l<theRootSystemSize; l++)\n";
output << "   { for (var j=0; j<theWeylDim; j++)\n";
output << "     { theOutputRoot=ActOnARootGenIndex(j, theRootSystem[l], theOutputRoot);\n";
output << "       addToRootSystemNoRepetition(theOutputRoot);\n";
output << "     }\n";
output << "   }\n";
output << "   WriteRootSystem();\n";
output << "   drawOnCanvasMain();\n";
output << " }\n";
output << " \n";
output << " function WriteRootSystem()\n";
output << " { var output = document.getElementById(\"outputField\");\n";
output << "   output.value=\"\";\n";
output << "   output.rows=theRootSystemSize;\n";
output << "   var tempS;\n";
output << "   for (var i=0; i<theRootSystemSize; i++)\n";
output << "   { tempS=\"(\";\n";
output << "     for (var j=0; j<theWeylDim; j++)\n";
output << "     { tempS=tempS+theRootSystem[i][j];\n";
output << "       if (j!=theWeylDim-1)\n";
output << "         tempS=tempS+\",\";\n";
output << "     }\n";
output << "     tempS=tempS+\")\";\n";
output << "     output.value+=tempS;\n";
output << "     if (i!=theRootSystemSize-1)\n";
output << "       output.value+=\"\\n\";\n";
output << "   }  \n";
output << " }\n";
output << " </script>\n";
output << " \n";
output << " <script type=\"text/javascript\">\n";
output << " var NumElements=0;\n";
output << " var node;\n";
output << " var surface;\n";
output << " var MaxNumCoords=8;\n";
output << " var Basis= new Array(MaxNumCoords);\n";
output << " var Xshift=200;\n";
output << " var Yshift=200;\n";
output << " var selectedBasisIndex=-1;//-2 = center of coord system is selected\n";
output << " var GraphicsUnit=50;\n";
output << " var clickTolerance=5;\n";
output << " var RootsArray;\n";
output << " var ZeroRoot;\n";
output << " var ButtonIsDown=false;\n";
output << " for (tempCounter=0; tempCounter<MaxNumCoords; tempCounter++)\n";
output << "   Basis[tempCounter]= new Array(2);\n";
output << " tempCounter=0;\n";
output << " Basis[tempCounter][0]=1;  Basis[tempCounter][1]=0; tempCounter++; \n";
output << " Basis[tempCounter][0]=-0.5;    Basis[tempCounter][1]=0.29; tempCounter++; \n";
output << " Basis[tempCounter][0]=1.5;  Basis[tempCounter][1]=-1.8; tempCounter++; \n";
output << " Basis[tempCounter][0]=-0.8;  Basis[tempCounter][1]=1.4; tempCounter++; \n";
output << " Basis[tempCounter][0]=1.6;  Basis[tempCounter][1]=0.9; tempCounter++; \n";
output << " Basis[tempCounter][0]=1.6;  Basis[tempCounter][1]=0.8; tempCounter++; \n";
output << " Basis[tempCounter][0]=1.5;  Basis[tempCounter][1]=0.8; tempCounter++; \n";
output << " Basis[tempCounter][0]=1.4;  Basis[tempCounter][1]=0.8; tempCounter++; \n";
output << " for (tempCounter=0; tempCounter<MaxNumCoords; tempCounter++)\n";
output << " { Basis[tempCounter][0]*= GraphicsUnit;\n";
output << "   Basis[tempCounter][1]*= GraphicsUnit;\n";
output << " } \n";
output << " \n";
output << " function ptsWithinClickTolerance(x1, y1, x2, y2)\n";
output << " { if (x1-x2>clickTolerance || x2-x1>clickTolerance || y1-y2>clickTolerance || y2-y1>clickTolerance )\n";
output << "     return false;\n";
output << "   return true;\n";
output << " }\n";
output << " \n";
output << " function clickCanvasMain(cx,cy)\n";
output << " { var divPosX=0;\n";
output << "   var divPosY=0;\n";
output << "   var thePointer= canvasMain;\n";
output << "   while(thePointer)\n";
output << "   { divPosX += thePointer.offsetLeft;\n";
output << "     divPosY += thePointer.offsetTop;\n";
output << "     thePointer = thePointer.offsetParent;\n";
output << "   }\n";
output << "   var posx=(cx-divPosX+document.body.scrollLeft-Xshift);\n";
output << "   var posy=(cy-divPosY+document.body.scrollTop-Yshift);\n";
output << "   selectedBasisIndex=-1;\n";
output << "   if (ptsWithinClickTolerance(posx,posy,0,0))\n";
output << "     selectedBasisIndex=-2;\n";
output << "   for (i=0;i<MaxNumCoords;i++)\n";
output << "   { if (ptsWithinClickTolerance(posx,posy,Basis[i][0], Basis[i][1]))\n";
output << "       selectedBasisIndex=i;\n";
output << "   }\n";
output << " }\n";
output << "  \n";
output << " function mouseMoveRedraw(cx, cy)\n";
output << " { if (selectedBasisIndex!=-1)\n";
output << "   { var divPosX=0;\n";
output << "     var divPosY=0;\n";
output << "     var thePointer= canvasMain;\n";
output << "     while(thePointer)\n";
output << "     { divPosX += thePointer.offsetLeft;\n";
output << "       divPosY += thePointer.offsetTop;\n";
output << "       thePointer = thePointer.offsetParent;\n";
output << "     }\n";
output << "     var posx=(cx-divPosX+document.body.scrollLeft-Xshift);\n";
output << "     var posy=(cy-divPosY+document.body.scrollTop-Yshift);\n";
output << "     if (selectedBasisIndex==-2)\n";
output << "     { Xshift=(cx-divPosX+document.body.scrollLeft);\n";
output << "       Yshift=(cy-divPosY+document.body.scrollTop);\n";
output << "     }\n";
output << " 		else\n";
output << "     {	Basis[selectedBasisIndex][0]=posx;\n";
output << "       Basis[selectedBasisIndex][1]=posy;\n";
output << "     }\n";
output << "     drawOnCanvasMain();\n";
output << "   }\n";
output << " }\n";
output << " \n";
output << " function getCoord(thePoint, Coord)\n";
output << " { var result=Number(0);\n";
output << "   for (var counterI=0; counterI<theWeylDim; counterI++)\n";
output << "     result= result+ thePoint[counterI]*Basis[counterI][Coord];\n";
output << "   result=Math.floor(result);\n";
output << "   return result;\n";
output << " }\n";
output << " \n";
output << " function drawLineBetweenZeroAndRoot(theRoot)\n";
output << " { xCoord1=getCoord(ZeroRoot,0)+Xshift;\n";
output << "   yCoord1=getCoord(ZeroRoot,1)+Yshift;\n";
output << "   xCoord2=getCoord(theRoot,0)+Xshift;\n";
output << "   yCoord2=getCoord(theRoot,1)+Yshift;\n";
output << "   surface.createLine({ x1 : xCoord1, y1 : yCoord1, x2 : xCoord2, y2 : yCoord2 }).setStroke({color : \"blue\"});\n";
output << " }\n";
output << " \n";
output << " function drawCircleAtRoot(theRoot)\n";
output << " { xCoord1=getCoord(theRoot,0)+Xshift;\n";
output << "   yCoord1=getCoord(theRoot,1)+Yshift;\n";
output << "   surface.createEllipse({ cx : xCoord1, cy : yCoord1, rx : 2, ry : 2 }).setStroke({color : \"red\"});\n";
output << " }\n";
output << " \n";
output << " function drawTextAtRoot(theRoot, theText)\n";
output << " { xCoord1=getCoord(theRoot,0)+Xshift;\n";
output << "   yCoord1=getCoord(theRoot,1)+Yshift;\n";
output << "   var tempText=surface.createText({x: xCoord1, y: yCoord1, text: theText});\n";
output << "   tempText.setFont({family : \"Arial\", size : \"9pt\"});\n";
output << "   tempText.setStroke(\"black\");\n";
output << " }\n";
output << " \n";
output << " function drawOnCanvasMain()\n";
output << " {//	alert(\"paint\");\n";
output << "   surface.clear();\n";
output << "   ZeroRoot= new Array(theWeylDim);\n";
output << "   var tempRoot=new Array(theWeylDim);\n";
output << "   for (var i=0; i<theWeylDim; i++)\n";
output << "   { ZeroRoot[i]=0;\n";
output << "     tempRoot[i]=0;\n";
output << "   }\n";
output << "   for (var i=0; i<theWeylDim; i++)\n";
output << "   { tempRoot[i]=1;\n";
output << "     drawCircleAtRoot(tempRoot);\n";
output << "     drawTextAtRoot(tempRoot, i+1);\n";
output << "     tempRoot[i]=0;\n";
output << "   }\n";
output << "   for (var CounterK=0; CounterK<theRootSystemSize; CounterK++)\n";
output << "     drawLineBetweenZeroAndRoot(theRootSystem[CounterK]);  \n";
output << " }\n";
output << " \n";
output << " function initDojo()\n";
output << " { node = dojo.byId(canvasMain);\n";
output << "   surface = dojox.gfx.createSurface(node, 400, 400);\n";
output << "   initRecompute();\n";
output << " }\n";
output << " \n";
output << " function initRecompute()\n";
output << " { var tempWeylLetter=document.getElementById(\"textType\").value;\n";
output << "   var tempWeylDim=document.getElementById(\"textDim\").value;\n";
output << "   tempWeylDim=Number(tempWeylDim);\n";
output << "   tempWeylLetter=tempWeylLetter.toUpperCase();\n";
output << "   generateRootSystemFromWeylLetterAndDim(tempWeylLetter, tempWeylDim); \n";
output << "   drawOnCanvasMain();\n";
output << " }\n";
output << " dojo.require(\"dojox.gfx\");\n";
output << " dojo.addOnLoad(initDojo);\n";
output << " </script>\n";
}
void static_html5(std::stringstream& output){
output << " <!>\n";
output << " </body>\n";
output << " </html>\n";
output << " \n";
output << " \n";
}
