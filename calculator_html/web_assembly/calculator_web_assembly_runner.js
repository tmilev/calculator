class Runner {
  constructor() {
    /**@type{string} */
    this.lastInput = "";
    this.flagInitializationStarted = false;
    this.ready = false;
    // Improtant. 
    // 1. The file calculator.js
    // is autogenerated and kept in its pure autogenerated form.
    // It will have an extra "module.exports" code snippet appended to it 
    // by the calculator server during the browserification process.
    // 2. The file name is relative to calculator_html folder.
    // 3. Requiring this file does a lot of heavy work by default, such as downloading the 
    // web assembly binary, so we trigger it explicitly here, rather than at the start of the present file.
    this.calculatorWebAssembly = require("./web_assembly/calculator");
    this.calculatorWebAssembly.TTY.default_tty_ops.get_char = (tty) => {
      this.getChar(tty);
    }
    this.calculatorWebAssembly.addOnInit(() => {
      this.ready = true;
      this.doCallCalculator(callback);
    });
  }

  doCallCalculator(
    /**@type {function} */
    callback,
  ) {
    let result = this.calculatorWebAssembly.Module.ccall('callCalculator', 'string', ['string'], [this.lastInput]);
    console.log(result);
    if (callback !== null && callback !== undefined) {
      callback(result);
    }
    this.calculatorWebAssembly._free(result);
  }


  getChar(tty) {
    if (tty.input.length !== 0) {
      return tty.input.shift();
    }
    tty.input = this.calculatorWebAssembly.intArrayFromString(this.lastInput + "\n", true);
    return tty.input.shift();
  }


  callMain(
    /**@type {string} */
    input,
    /**@type {function} */
    callback,
  ) {
    this.lastInput = input;
    if (!this.flagInitializationStarted) {
      this.initialize(callback);
      return;
    }
    if (this.ready) {
      this.doCallCalculator(callback);
      return;
    }
    setTimeout(() => {
      this.callMain(input, callback);
    }, 1000);
  }

  receiveMessage(e) {
    console.log("DEBUG: message data: " + e.data);
  }
}

let runner = new Runner();

onmessage = (e) => {
  runner.receiveMessage(e);
};

module.exports = {
  runner,
};